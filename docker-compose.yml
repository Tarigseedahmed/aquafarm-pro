version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aquafarm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aquafarm_pro
      POSTGRES_USER: aquafarm_admin
      POSTGRES_PASSWORD: aquafarm_secure_2025
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/db/schema.sql:/docker-entrypoint-initdb.d/init.sql
    # Do not expose Postgres port publicly in production-lite
    networks:
      - aquafarm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aquafarm_admin"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aquafarm-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass aquafarm_redis_2025
    volumes:
      - redis_data:/data
    # Do not expose Redis port publicly in production-lite
    networks:
      - aquafarm-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "aquafarm_redis_2025", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: aquafarm-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DOMAIN: localhost
      VPS_HOST: localhost
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: aquafarm_pro
      DB_USER: aquafarm_admin
      DB_PASSWORD: aquafarm_secure_2025
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: aquafarm_redis_2025
      JWT_SECRET: aquafarm-pro-super-secure-jwt-secret-key-for-production-2025
      HOSTINGER_API_KEY: dummy-key
      CORS_ORIGIN: http://localhost:3001
      NEXT_PUBLIC_API_URL: http://localhost:3000
    # Do not expose backend port publicly; Nginx fronts the service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aquafarm-network
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # One-off migration job (run before backend on new releases)
  migration-runner:
    profiles: [ migrate ]
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: aquafarm-migrations
    restart: "no"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_TYPE: postgres
      DATABASE_URL: ${DATABASE_URL:-}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - aquafarm-network
    command: sh -c "npm run build && npm run migration:run"

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: aquafarm-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3000
      NEXT_PUBLIC_APP_URL: http://localhost:3001
      DOMAIN: localhost
    # Do not expose frontend port publicly; Nginx fronts the service
    depends_on:
      - backend
    networks:
      - aquafarm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aquafarm-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./infra/nginx/aquafarm-http.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/public:/var/www/html/static
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - aquafarm-network
    environment:
      - DOMAIN=localhost
      - VPS_HOST=localhost
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    profiles: [ monitoring ]
    image: prom/prometheus:latest
    container_name: aquafarm-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - aquafarm-network

  # Grafana Dashboard
  grafana:
    profiles: [ monitoring ]
    image: grafana/grafana:latest
    container_name: aquafarm-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - aquafarm-network

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  aquafarm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16