version: '3.8'

services:
  # PostgreSQL Database (Development)
  postgres-dev:
    image: postgres:15-alpine
    container_name: aquafarm-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-aquapro_dev}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-admin123}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docs/db/schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - aquafarm-dev-network

  # Redis Cache (Development)
  redis-dev:
    image: redis:7-alpine
    container_name: aquafarm-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    ports:
      - "6379:6379"
    networks:
      - aquafarm-dev-network

  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: aquafarm-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aquafarmpro.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres-dev
    networks:
      - aquafarm-dev-network

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: aquafarm-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis-dev:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis-dev
    networks:
      - aquafarm-dev-network

  # Development Backend with Hot Reload
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: aquafarm-backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres-dev
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-aquapro_dev}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-admin123}
      REDIS_HOST: redis-dev
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret}
      HOSTINGER_API_KEY: ${HOSTINGER_API_KEY}
      DEBUG_MODE: true
      LOG_LEVEL: debug
    ports:
      - "3000:3000"
      - "9229:9229" # Node.js debugger
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - aquafarm-dev-network
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    command: npm run start:dev

  # Development Frontend with Hot Reload
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: aquafarm-frontend-dev
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3000/api
      NEXT_PUBLIC_APP_URL: http://localhost:3001
      NODE_ENV: development
    ports:
      - "3001:3000"
    depends_on:
      - backend-dev
    networks:
      - aquafarm-dev-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: aquafarm-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - aquafarm-dev-network

  # Documentation Server
  docs:
    image: nginx:alpine
    container_name: aquafarm-docs
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./docs:/usr/share/nginx/html:ro
      - ./infra/nginx/docs.conf:/etc/nginx/conf.d/default.conf
    networks:
      - aquafarm-dev-network

# Development Volumes
volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

# Development Networks
networks:
  aquafarm-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16