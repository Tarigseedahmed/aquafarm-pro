name: Production Database Migrations

on:
  workflow_dispatch:
    inputs:
      confirm_production:
        description: 'I confirm this will run on production database'
        required: true
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (show what would be executed)'
        required: false
        default: true
        type: boolean

jobs:
  production-migrations:
    name: Run Production Database Migrations
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_production == true
    environment:
      name: production
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

      - name: Validate Database Connection
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          DB_TYPE: postgres
          NODE_ENV: production
        run: |
          echo "Validating production database connection..."
          npm run migration:show
          echo "Database connection validated"

      - name: Show Pending Migrations
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          DB_TYPE: postgres
          NODE_ENV: production
        run: |
          echo "Showing pending migrations..."
          npm run migration:show

      - name: Run Migrations (Dry Run)
        if: github.event.inputs.dry_run == true
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          DB_TYPE: postgres
          NODE_ENV: production
        run: |
          echo "DRY RUN: Showing what would be executed..."
          npm run migration:show
          echo "DRY RUN: No actual changes made"

      - name: Run Migrations (Live)
        if: github.event.inputs.dry_run == false
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          DB_TYPE: postgres
          NODE_ENV: production
        run: |
          echo "Running production migrations..."
          npm run migration:run
          echo "Production migrations completed"

      - name: Verify RLS Policies
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          DB_TYPE: postgres
          NODE_ENV: test
        run: |
          echo "Verifying RLS policies..."
          npm run test:e2e -- rls-policies.e2e-spec.ts rls-postgres.e2e-spec.ts
          echo "RLS policies verified"

      - name: Database Health Check
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          DB_TYPE: postgres
          NODE_ENV: production
        run: |
          echo "Performing database health check..."
          # Add health check commands here
          echo "Database health check passed"

      - name: Notify Migration Completion
        if: github.event.inputs.dry_run == false
        run: |
          echo "Notifying stakeholders of migration completion..."
          # Add notification logic here
